{"version":3,"file":"text-bitmap.min.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../src/BitmapFontData.ts","../../src/formats/TextFormat.ts","../../src/formats/XMLFormat.ts","../../src/formats/XMLStringFormat.ts","../../src/formats/index.ts","../../src/utils/drawGlyph.ts","../../src/utils/generateFillStyle.ts","../../src/BitmapFont.ts","../../src/utils/resolveCharacters.ts","../../src/BitmapText.ts","../../src/BitmapFontLoader.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable max-len */\n\n/**\n * Normalized parsed data from .fnt files.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFontData\n{\n    public info: IBitmapFontDataInfo[];\n    public common: IBitmapFontDataCommon[];\n    public page: IBitmapFontDataPage[];\n    public char: IBitmapFontDataChar[];\n    public kerning: IBitmapFontDataKerning[];\n\n    constructor()\n    {\n        /**\n         * @member {PIXI.IBitmapFontDataInfo[]}\n         * @readOnly\n         */\n        this.info = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataCommon[]}\n         * @readOnly\n         */\n        this.common = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataPage[]}\n         * @readOnly\n         */\n        this.page = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataChar[]}\n         * @readOnly\n         */\n        this.char = [];\n\n        /**\n         * @member {PIXI.IBitmapFontDataKerning[]}\n         * @readOnly\n         */\n        this.kerning = [];\n    }\n}\n\nexport interface IBitmapFontDataInfo {\n    face: string;\n    size: number;\n}\n\nexport interface IBitmapFontDataCommon {\n    lineHeight: number;\n}\n\nexport interface IBitmapFontDataPage {\n    id: number;\n    file: string;\n}\n\nexport interface IBitmapFontDataChar {\n    id: number;\n    page: number;\n    x: number;\n    y: number;\n    width: number;\n    height: number;\n    xoffset: number;\n    yoffset: number;\n    xadvance: number;\n}\n\nexport interface IBitmapFontDataKerning {\n    first: number;\n    second: number;\n    amount: number;\n}\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataInfo\n * @property {string} face\n * @property {number} size\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataCommon\n * @property {number} lineHeight\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataPage\n * @property {number} id\n * @property {string} file\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataChar\n * @property {string} id\n * @property {number} page\n * @property {number} x\n * @property {number} y\n * @property {number} width\n * @property {number} height\n * @property {number} xoffset\n * @property {number} yoffset\n * @property {number} xadvance\n */\n\n/**\n * @memberof PIXI\n * @typedef {object} IBitmapFontDataKerning\n * @property {number} first\n * @property {number} second\n * @property {number} amount\n */\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * Internal data format used to convert to BitmapFontData.\n * @private\n */\ninterface IBitmapFontRawData {\n    info: {\n        face: string;\n        size: string;\n    }[];\n    common: { lineHeight: string }[];\n    page: {\n        id: string;\n        file: string;\n    }[];\n    chars: {\n        count: number;\n    }[];\n    char: {\n        id: string;\n        page: string;\n        x: string;\n        y: string;\n        width: string;\n        height: string;\n        xoffset: string;\n        yoffset: string;\n        xadvance: string;\n    }[];\n    kernings?: {\n        count: number;\n    }[];\n    kerning?: {\n        first: string;\n        second: string;\n        amount: string;\n    }[];\n}\n\n/**\n * BitmapFont format that's Text-based.\n *\n * @class\n * @private\n */\nexport class TextFormat\n{\n    /**\n     * Check if resource refers to txt font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return typeof data === 'string' && data.indexOf('info face=') === 0;\n    }\n\n    /**\n     * Convert text font data to a javascript object.\n     *\n     * @static\n     * @private\n     * @param {string} txt - Raw string data to be converted\n     * @return {PIXI.BitmapFontData} Parsed font data\n     */\n    static parse(txt: string): BitmapFontData\n    {\n        // Retrieve data item\n        const items = txt.match(/^[a-z]+\\s+.+$/gm);\n        const rawData: IBitmapFontRawData = {\n            info: [],\n            common: [],\n            page: [],\n            char: [],\n            chars: [],\n            kerning: [],\n            kernings: [],\n        };\n\n        for (const i in items)\n        {\n            // Extract item name\n            const name = items[i].match(/^[a-z]+/gm)[0] as keyof BitmapFontData;\n\n            // Extract item attribute list as string ex.: \"width=10\"\n            const attributeList = items[i].match(/[a-zA-Z]+=([^\\s\"']+|\"([^\"]*)\")/gm);\n\n            // Convert attribute list into an object\n            const itemData: any = {};\n\n            for (const i in attributeList)\n            {\n                // Split key-value pairs\n                const split = attributeList[i].split('=');\n                const key = split[0];\n\n                // Remove eventual quotes from value\n                const strValue = split[1].replace(/\"/gm, '');\n\n                // Try to convert value into float\n                const floatValue = parseFloat(strValue);\n\n                // Use string value case float value is NaN\n                const value = isNaN(floatValue) ? strValue : floatValue;\n\n                itemData[key] = value;\n            }\n\n            // Push current item to the resulting data\n            rawData[name].push(itemData);\n        }\n\n        const font = new BitmapFontData();\n\n        rawData.info.forEach((info) => font.info.push({\n            face: info.face,\n            size: parseInt(info.size, 10),\n        }));\n\n        rawData.common.forEach((common) => font.common.push({\n            lineHeight: parseInt(common.lineHeight, 10),\n        }));\n\n        rawData.page.forEach((page) => font.page.push({\n            id: parseInt(page.id, 10),\n            file: page.file,\n        }));\n\n        rawData.char.forEach((char) => font.char.push({\n            id: parseInt(char.id, 10),\n            page: parseInt(char.page, 10),\n            x: parseInt(char.x, 10),\n            y: parseInt(char.y, 10),\n            width: parseInt(char.width, 10),\n            height: parseInt(char.height, 10),\n            xoffset: parseInt(char.xoffset, 10),\n            yoffset: parseInt(char.yoffset, 10),\n            xadvance: parseInt(char.xadvance, 10),\n        }));\n\n        rawData.kerning.forEach((kerning) => font.kerning.push({\n            first: parseInt(kerning.first, 10),\n            second: parseInt(kerning.second, 10),\n            amount: parseInt(kerning.amount, 10),\n        }));\n\n        return font;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLFormat\n{\n    /**\n     * Check if resource refers to xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        return data instanceof XMLDocument\n            && data.getElementsByTagName('page').length\n            && data.getElementsByTagName('info')[0].getAttribute('face') !== null;\n    }\n\n    /**\n     * Convert the XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {XMLDocument} xml\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xml: XMLDocument): BitmapFontData\n    {\n        const data = new BitmapFontData();\n        const info = xml.getElementsByTagName('info');\n        const common = xml.getElementsByTagName('common');\n        const page = xml.getElementsByTagName('page');\n        const char = xml.getElementsByTagName('char');\n        const kerning = xml.getElementsByTagName('kerning');\n\n        for (let i = 0; i < info.length; i++)\n        {\n            data.info.push({\n                face: info[i].getAttribute('face'),\n                size: parseInt(info[i].getAttribute('size'), 10),\n            });\n        }\n\n        for (let i = 0; i < common.length; i++)\n        {\n            data.common.push({\n                lineHeight: parseInt(common[i].getAttribute('lineHeight'), 10),\n            });\n        }\n\n        for (let i = 0; i < page.length; i++)\n        {\n            data.page.push({\n                id: parseInt(page[i].getAttribute('id'), 10) || 0,\n                file: page[i].getAttribute('file'),\n            });\n        }\n\n        for (let i = 0; i < char.length; i++)\n        {\n            const letter = char[i];\n\n            data.char.push({\n                id: parseInt(letter.getAttribute('id'), 10),\n                page: parseInt(letter.getAttribute('page'), 10) || 0,\n                x: parseInt(letter.getAttribute('x'), 10),\n                y: parseInt(letter.getAttribute('y'), 10),\n                width: parseInt(letter.getAttribute('width'), 10),\n                height: parseInt(letter.getAttribute('height'), 10),\n                xoffset: parseInt(letter.getAttribute('xoffset'), 10),\n                yoffset: parseInt(letter.getAttribute('yoffset'), 10),\n                xadvance: parseInt(letter.getAttribute('xadvance'), 10),\n            });\n        }\n\n        for (let i = 0; i < kerning.length; i++)\n        {\n            data.kerning.push({\n                first: parseInt(kerning[i].getAttribute('first'), 10),\n                second: parseInt(kerning[i].getAttribute('second'), 10),\n                amount: parseInt(kerning[i].getAttribute('amount'), 10),\n            });\n        }\n\n        return data;\n    }\n}\n","import { BitmapFontData } from '../BitmapFontData';\nimport { XMLFormat } from './XMLFormat';\n\n/**\n * BitmapFont format that's XML-based.\n *\n * @class\n * @private\n */\nexport class XMLStringFormat\n{\n    /**\n     * Check if resource refers to text xml font data.\n     *\n     * @static\n     * @private\n     * @param {any} data\n     * @return {boolean} True if resource could be treated as font data, false otherwise.\n     */\n    static test(data: unknown): boolean\n    {\n        if (typeof data === 'string' && data.indexOf('<font>') > -1)\n        {\n            const xml = new self.DOMParser().parseFromString(data, 'text/xml');\n\n            return XMLFormat.test(xml);\n        }\n\n        return false;\n    }\n\n    /**\n     * Convert the text XML into BitmapFontData that we can use.\n     *\n     * @static\n     * @private\n     * @param {string} xmlTxt\n     * @return {BitmapFontData} Data to use for BitmapFont\n     */\n    static parse(xmlTxt: string): BitmapFontData\n    {\n        const xml = new self.DOMParser().parseFromString(xmlTxt, 'text/xml');\n\n        return XMLFormat.parse(xml);\n    }\n}\n","import { TextFormat } from './TextFormat';\nimport { XMLFormat } from './XMLFormat';\nimport { XMLStringFormat } from './XMLStringFormat';\n\n// Registered formats, maybe make this extensible in the future?\nconst formats = [\n    TextFormat,\n    XMLFormat,\n    XMLStringFormat,\n] as const;\n\n/**\n * Auto-detect BitmapFont parsing format based on data.\n * @private\n * @param {any} data - Data to detect format\n * @return {any} Format or null\n */\nexport function autoDetectFormat(data: unknown): typeof formats[number] | null\n{\n    for (let i = 0; i < formats.length; i++)\n    {\n        if (formats[i].test(data))\n        {\n            return formats[i];\n        }\n    }\n\n    return null;\n}\n","import { generateFillStyle } from './generateFillStyle';\nimport { hex2rgb, string2hex } from '@pixi/utils';\nimport type { TextMetrics, TextStyle } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w drawGlyph & Text#updateText\n\n/**\n * Draws the glyph `metrics.text` on the given canvas.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {HTMLCanvasElement} canvas\n * @param {CanvasRenderingContext2D} context\n * @param {TextMetrics} metrics\n * @param {number} x\n * @param {number} y\n * @param {number} resolution\n * @param {TextStyle} style\n */\nexport function drawGlyph(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    metrics: TextMetrics,\n    x: number,\n    y: number,\n    resolution: number,\n    style: TextStyle\n): void\n{\n    const char = metrics.text;\n    const fontProperties = metrics.fontProperties;\n\n    context.translate(x, y);\n    context.scale(resolution, resolution);\n\n    const tx = style.strokeThickness / 2;\n    const ty = -(style.strokeThickness / 2);\n\n    context.font = style.toFontString();\n    context.lineWidth = style.strokeThickness;\n    context.textBaseline = style.textBaseline;\n    context.lineJoin = style.lineJoin;\n    context.miterLimit = style.miterLimit;\n\n    // set canvas text styles\n    context.fillStyle = generateFillStyle(canvas, context, style, resolution, [char], metrics);\n    context.strokeStyle = style.stroke as string;\n\n    const dropShadowColor = style.dropShadowColor;\n    const rgb = hex2rgb(typeof dropShadowColor === 'number' ? dropShadowColor : string2hex(dropShadowColor));\n\n    if (style.dropShadow)\n    {\n        context.shadowColor = `rgba(${rgb[0] * 255},${rgb[1] * 255},${rgb[2] * 255},${style.dropShadowAlpha})`;\n        context.shadowBlur = style.dropShadowBlur;\n        context.shadowOffsetX = Math.cos(style.dropShadowAngle) * style.dropShadowDistance;\n        context.shadowOffsetY = Math.sin(style.dropShadowAngle) * style.dropShadowDistance;\n    }\n    else\n    {\n        context.shadowColor = 'black';\n        context.shadowBlur = 0;\n        context.shadowOffsetX = 0;\n        context.shadowOffsetY = 0;\n    }\n\n    if (style.stroke && style.strokeThickness)\n    {\n        context.strokeText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n    if (style.fill)\n    {\n        context.fillText(char, tx, ty + metrics.lineHeight - fontProperties.descent);\n    }\n\n    context.setTransform(1, 0, 0, 1, 0, 0); // defaults needed for older browsers (e.g. Opera 29)\n\n    context.fillStyle = 'rgba(0, 0, 0, 0)';\n}\n","import { TextStyle, TextMetrics, TEXT_GRADIENT } from '@pixi/text';\n\n// TODO: Prevent code duplication b/w generateFillStyle & Text#generateFillStyle\n\n/**\n * Generates the fill style. Can automatically generate a gradient based on the fill style being an array\n *\n * @private\n * @param {object} style - The style.\n * @param {string[]} lines - The lines of text.\n * @return {string|number|CanvasGradient} The fill style\n */\nexport function generateFillStyle(\n    canvas: HTMLCanvasElement,\n    context: CanvasRenderingContext2D,\n    style: TextStyle,\n    resolution: number,\n    lines: string[],\n    metrics: TextMetrics\n): string|CanvasGradient|CanvasPattern\n{\n    // TODO: Can't have different types for getter and setter. The getter shouldn't have the number type as\n    //       the setter converts to string. See this thread for more details:\n    //       https://github.com/microsoft/TypeScript/issues/2521\n    const fillStyle: string|string[]|CanvasGradient|CanvasPattern = style.fill as any;\n\n    if (!Array.isArray(fillStyle))\n    {\n        return fillStyle;\n    }\n    else if (fillStyle.length === 1)\n    {\n        return fillStyle[0];\n    }\n\n    // the gradient will be evenly spaced out according to how large the array is.\n    // ['#FF0000', '#00FF00', '#0000FF'] would created stops at 0.25, 0.5 and 0.75\n    let gradient: string[]|CanvasGradient;\n\n    // a dropshadow will enlarge the canvas and result in the gradient being\n    // generated with the incorrect dimensions\n    const dropShadowCorrection = (style.dropShadow) ? style.dropShadowDistance : 0;\n\n    // should also take padding into account, padding can offset the gradient\n    const padding = style.padding || 0;\n\n    const width = (canvas.width / resolution) - dropShadowCorrection - (padding * 2);\n    const height = (canvas.height / resolution) - dropShadowCorrection - (padding * 2);\n\n    // make a copy of the style settings, so we can manipulate them later\n    const fill = fillStyle.slice();\n    const fillGradientStops = style.fillGradientStops.slice();\n\n    // wanting to evenly distribute the fills. So an array of 4 colours should give fills of 0.25, 0.5 and 0.75\n    if (!fillGradientStops.length)\n    {\n        const lengthPlus1 = fill.length + 1;\n\n        for (let i = 1; i < lengthPlus1; ++i)\n        {\n            fillGradientStops.push(i / lengthPlus1);\n        }\n    }\n\n    // stop the bleeding of the last gradient on the line above to the top gradient of the this line\n    // by hard defining the first gradient colour at point 0, and last gradient colour at point 1\n    fill.unshift(fillStyle[0]);\n    fillGradientStops.unshift(0);\n\n    fill.push(fillStyle[fillStyle.length - 1]);\n    fillGradientStops.push(1);\n\n    if (style.fillGradientType === TEXT_GRADIENT.LINEAR_VERTICAL)\n    {\n        // start the gradient at the top center of the canvas, and end at the bottom middle of the canvas\n        gradient = context.createLinearGradient(width / 2, padding, width / 2, height + padding);\n\n        // we need to repeat the gradient so that each individual line of text has the same vertical gradient effect\n        // ['#FF0000', '#00FF00', '#0000FF'] over 2 lines would create stops at 0.125, 0.25, 0.375, 0.625, 0.75, 0.875\n\n        // There's potential for floating point precision issues at the seams between gradient repeats.\n        // The loop below generates the stops in order, so track the last generated one to prevent\n        // floating point precision from making us go the teeniest bit backwards, resulting in\n        // the first and last colors getting swapped.\n        let lastIterationStop = 0;\n\n        // Actual height of the text itself, not counting spacing for lineHeight/leading/dropShadow etc\n        const textHeight = metrics.fontProperties.fontSize + style.strokeThickness;\n\n        // textHeight, but as a 0-1 size in global gradient stop space\n        const gradStopLineHeight = textHeight / height;\n\n        for (let i = 0; i < lines.length; i++)\n        {\n            const thisLineTop = metrics.lineHeight * i;\n\n            for (let j = 0; j < fill.length; j++)\n            {\n                // 0-1 stop point for the current line, multiplied to global space afterwards\n                let lineStop = 0;\n\n                if (typeof fillGradientStops[j] === 'number')\n                {\n                    lineStop = fillGradientStops[j];\n                }\n                else\n                {\n                    lineStop = j / fill.length;\n                }\n\n                const globalStop = (thisLineTop / height) + (lineStop * gradStopLineHeight);\n\n                // Prevent color stop generation going backwards from floating point imprecision\n                let clampedStop = Math.max(lastIterationStop, globalStop);\n\n                clampedStop = Math.min(clampedStop, 1); // Cap at 1 as well for safety's sake to avoid a possible throw.\n                gradient.addColorStop(clampedStop, fill[j]);\n                lastIterationStop = clampedStop;\n            }\n        }\n    }\n    else\n    {\n        // start the gradient at the center left of the canvas, and end at the center right of the canvas\n        gradient = context.createLinearGradient(padding, height / 2, width + padding, height / 2);\n\n        // can just evenly space out the gradients in this case, as multiple lines makes no difference\n        // to an even left to right gradient\n        const totalIterations = fill.length + 1;\n        let currentIteration = 1;\n\n        for (let i = 0; i < fill.length; i++)\n        {\n            let stop: number;\n\n            if (typeof fillGradientStops[i] === 'number')\n            {\n                stop = fillGradientStops[i];\n            }\n            else\n            {\n                stop = currentIteration / totalIterations;\n            }\n            gradient.addColorStop(stop, fill[i]);\n            currentIteration++;\n        }\n    }\n\n    return gradient;\n}\n","import { getResolutionOfUrl } from '@pixi/utils';\nimport { Rectangle } from '@pixi/math';\nimport { Texture, BaseTexture } from '@pixi/core';\nimport { TextStyle, TextMetrics } from '@pixi/text';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFontData } from './BitmapFontData';\nimport { resolveCharacters, drawGlyph } from './utils';\n\nimport type { Dict } from '@pixi/utils';\nimport type { ITextStyle } from '@pixi/text';\n\nexport interface IBitmapFontCharacter\n{\n    xOffset: number;\n    yOffset: number;\n    xAdvance: number;\n    texture: Texture;\n    page: number;\n    kerning: Dict<number>;\n}\n\nexport interface IBitmapFontOptions\n{\n    chars?: string | (string | string[])[];\n    resolution?: number;\n    padding?: number;\n    textureWidth?: number;\n    textureHeight?: number;\n}\n\n/**\n * BitmapFont represents a typeface available for use with the BitmapText class. Use the `install`\n * method for adding a font to be used.\n *\n * @class\n * @memberof PIXI\n */\nexport class BitmapFont\n{\n    /**\n     * This character set includes all the letters in the alphabet (both lower- and upper- case).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.ALPHA })\n     */\n    public static readonly ALPHA = [['a', 'z'], ['A', 'Z'], ' '];\n\n    /**\n     * This character set includes all decimal digits (from 0 to 9).\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @example\n     * BitmapFont.from(\"ExampleFont\", style, { chars: BitmapFont.NUMERIC })\n     */\n    public static readonly NUMERIC = [['0', '9']];\n\n    /**\n     * This character set is the union of `BitmapFont.ALPHA` and `BitmapFont.NUMERIC`.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     */\n    public static readonly ALPHANUMERIC = [['a', 'z'], ['A', 'Z'], ['0', '9'], ' '];\n\n    /**\n     * This character set consists of all the ASCII table.\n     * @readonly\n     * @static\n     * @member {string[][]}\n     * @see http://www.asciitable.com/\n     */\n    public static readonly ASCII = [[' ', '~']];\n\n    /**\n     * Collection of default options when using `BitmapFont.from`.\n     *\n     * @readonly\n     * @static\n     * @member {PIXI.IBitmapFontOptions}\n     * @property {number} resolution=1\n     * @property {number} textureWidth=512\n     * @property {number} textureHeight=512\n     * @property {number} padding=4\n     * @property {string|string[]|string[][]} chars = PIXI.BitmapFont.ALPHANUMERIC\n     */\n    public static readonly defaultOptions: IBitmapFontOptions = {\n        resolution: 1,\n        textureWidth: 512,\n        textureHeight: 512,\n        padding: 4,\n        chars: BitmapFont.ALPHANUMERIC,\n    };\n\n    /**\n     * Collection of available/installed fonts.\n     *\n     * @readonly\n     * @static\n     * @member {Object.<string, PIXI.BitmapFont>}\n     */\n    public static readonly available: Dict<BitmapFont> = {};\n    public readonly font: string;\n    public readonly size: number;\n    public readonly lineHeight: number;\n    public readonly chars: Dict<IBitmapFontCharacter>;\n    public readonly pageTextures: Dict<Texture>;\n    private _ownsTextures: boolean;\n\n    /**\n     * @param {PIXI.BitmapFontData} data\n     * @param {PIXI.Texture[]|Object.<string, PIXI.Texture>} textures\n     * @param {boolean} ownsTextures - Setting to `true` will destroy page textures\n     *        when the font is uninstalled.\n     */\n    constructor(data: BitmapFontData, textures: Texture[]|Dict<Texture>, ownsTextures?: boolean)\n    {\n        const [info] = data.info;\n        const [common] = data.common;\n        const [page] = data.page;\n        const res = getResolutionOfUrl(page.file);\n        const pageTextures: Dict<Texture> = {};\n\n        this._ownsTextures = ownsTextures;\n\n        /**\n         * The name of the font face.\n         *\n         * @member {string}\n         * @readonly\n         */\n        this.font = info.face;\n\n        /**\n         * The size of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.size = info.size;\n\n        /**\n         * The line-height of the font face in pixels.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.lineHeight = common.lineHeight / res;\n\n        /**\n         * The map of characters by character code.\n         *\n         * @member {object}\n         * @readonly\n         */\n        this.chars = {};\n\n        /**\n         * The map of base page textures (i.e., sheets of glyphs).\n         *\n         * @member {object}\n         * @readonly\n         * @private\n         */\n        this.pageTextures = pageTextures;\n\n        // Convert the input Texture, Textures or object\n        // into a page Texture lookup by \"id\"\n        for (let i = 0; i < data.page.length; i++)\n        {\n            const { id, file } = data.page[i];\n\n            pageTextures[id] = textures instanceof Array\n                ? textures[i] : textures[file];\n        }\n\n        // parse letters\n        for (let i = 0; i < data.char.length; i++)\n        {\n            const { id, page } = data.char[i];\n            let { x, y, width, height, xoffset, yoffset, xadvance } = data.char[i];\n\n            x /= res;\n            y /= res;\n            width /= res;\n            height /= res;\n            xoffset /= res;\n            yoffset /= res;\n            xadvance /= res;\n\n            const rect = new Rectangle(\n                x + (pageTextures[page].frame.x / res),\n                y + (pageTextures[page].frame.y / res),\n                width,\n                height\n            );\n\n            this.chars[id] = {\n                xOffset: xoffset,\n                yOffset: yoffset,\n                xAdvance: xadvance,\n                kerning: {},\n                texture: new Texture(\n                    pageTextures[page].baseTexture,\n                    rect\n                ),\n                page,\n            };\n        }\n\n        // parse kernings\n        for (let i = 0; i < data.kerning.length; i++)\n        {\n            let { first, second, amount } = data.kerning[i];\n\n            first /= res;\n            second /= res;\n            amount /= res;\n\n            if (this.chars[second])\n            {\n                this.chars[second].kerning[first] = amount;\n            }\n        }\n    }\n\n    /**\n     * Remove references to created glyph textures.\n     */\n    public destroy(): void\n    {\n        for (const id in this.chars)\n        {\n            this.chars[id].texture.destroy();\n            this.chars[id].texture = null;\n        }\n\n        for (const id in this.pageTextures)\n        {\n            if (this._ownsTextures)\n            {\n                this.pageTextures[id].destroy(true);\n            }\n\n            this.pageTextures[id] = null;\n        }\n\n        // Set readonly null.\n        (this as any).chars = null;\n        (this as any).pageTextures = null;\n    }\n\n    /**\n     * Register a new bitmap font.\n     *\n     * @static\n     * @param {XMLDocument|string|PIXI.BitmapFontData} data - The\n     *        characters map that could be provided as xml or raw string.\n     * @param {Object.<string, PIXI.Texture>|PIXI.Texture|PIXI.Texture[]}\n     *        textures - List of textures for each page.\n     * @param managedTexture - Set to `true` to destroy page textures\n     *        when the font is uninstalled. By default fonts created with\n     *        `BitmapFont.from` or from the `BitmapFontLoader` are `true`.\n     * @return {PIXI.BitmapFont} Result font object with font, size, lineHeight\n     *         and char fields.\n     */\n    public static install(\n        data: string|XMLDocument|BitmapFontData,\n        textures: Texture|Texture[]|Dict<Texture>,\n        ownsTextures?: boolean\n    ): BitmapFont\n    {\n        let fontData;\n\n        if (data instanceof BitmapFontData)\n        {\n            fontData = data;\n        }\n        else\n        {\n            const format = autoDetectFormat(data);\n\n            if (!format)\n            {\n                throw new Error('Unrecognized data format for font.');\n            }\n\n            fontData = format.parse(data as any);\n        }\n\n        // Single texture, convert to list\n        if (textures instanceof Texture)\n        {\n            textures = [textures];\n        }\n\n        const font = new BitmapFont(fontData, textures, ownsTextures);\n\n        BitmapFont.available[font.font] = font;\n\n        return font;\n    }\n\n    /**\n     * Remove bitmap font by name.\n     *\n     * @static\n     * @param name - Name of the font to uninstall.\n     */\n    public static uninstall(name: string): void\n    {\n        const font = BitmapFont.available[name];\n\n        if (!font)\n        {\n            throw new Error(`No font found named '${name}'`);\n        }\n\n        font.destroy();\n        delete BitmapFont.available[name];\n    }\n\n    /**\n     * Generates a bitmap-font for the given style and character set. This does not support\n     * kernings yet. With `style` properties, only the following non-layout properties are used:\n     *\n     * - {@link PIXI.TextStyle#dropShadow|dropShadow}\n     * - {@link PIXI.TextStyle#dropShadowDistance|dropShadowDistance}\n     * - {@link PIXI.TextStyle#dropShadowColor|dropShadowColor}\n     * - {@link PIXI.TextStyle#dropShadowBlur|dropShadowBlur}\n     * - {@link PIXI.TextStyle#dropShadowAngle|dropShadowAngle}\n     * - {@link PIXI.TextStyle#fill|fill}\n     * - {@link PIXI.TextStyle#fillGradientStops|fillGradientStops}\n     * - {@link PIXI.TextStyle#fillGradientType|fillGradientType}\n     * - {@link PIXI.TextStyle#fontFamily|fontFamily}\n     * - {@link PIXI.TextStyle#fontSize|fontSize}\n     * - {@link PIXI.TextStyle#fontVariant|fontVariant}\n     * - {@link PIXI.TextStyle#fontWeight|fontWeight}\n     * - {@link PIXI.TextStyle#lineJoin|lineJoin}\n     * - {@link PIXI.TextStyle#miterLimit|miterLimit}\n     * - {@link PIXI.TextStyle#stroke|stroke}\n     * - {@link PIXI.TextStyle#strokeThickness|strokeThickness}\n     * - {@link PIXI.TextStyle#textBaseline|textBaseline}\n     *\n     * @param {string} name - The name of the custom font to use with BitmapText.\n     * @param {object|PIXI.TextStyle} [style] - Style options to render with BitmapFont.\n     * @param {PIXI.IBitmapFontOptions} [options] - Setup options for font or name of the font.\n     * @param {string|string[]|string[][]} [options.chars=PIXI.BitmapFont.ALPHANUMERIC] - characters included\n     *      in the font set. You can also use ranges. For example, `[['a', 'z'], ['A', 'Z'], \"!@#$%^&*()~{}[] \"]`.\n     *      Don't forget to include spaces ' ' in your character set!\n     * @param {number} [options.resolution=1] - Render resolution for glyphs.\n     * @param {number} [options.textureWidth=512] - Optional width of atlas, smaller values to reduce memory.\n     * @param {number} [options.textureHeight=512] - Optional height of atlas, smaller values to reduce memory.\n     * @param {number} [options.padding=4] - Padding between glyphs on texture atlas.\n     * @return {PIXI.BitmapFont} Font generated by style options.\n     * @static\n     * @example\n     * PIXI.BitmapFont.from(\"TitleFont\", {\n     *     fontFamily: \"Arial\",\n     *     fontSize: 12,\n     *     strokeThickness: 2,\n     *     fill: \"purple\"\n     * });\n     *\n     * const title = new PIXI.BitmapText(\"This is the title\", { fontName: \"TitleFont\" });\n     */\n    public static from(name: string, textStyle?: TextStyle | Partial<ITextStyle>, options?: IBitmapFontOptions): BitmapFont\n    {\n        if (!name)\n        {\n            throw new Error('[BitmapFont] Property `name` is required.');\n        }\n\n        const {\n            chars,\n            padding,\n            resolution,\n            textureWidth,\n            textureHeight } = Object.assign(\n            {}, BitmapFont.defaultOptions, options);\n\n        const charsList = resolveCharacters(chars);\n        const style = textStyle instanceof TextStyle ? textStyle : new TextStyle(textStyle);\n        const lineWidth = textureWidth;\n        const fontData = new BitmapFontData();\n\n        fontData.info[0] = {\n            face: style.fontFamily as string,\n            size: style.fontSize as number,\n        };\n        fontData.common[0] = {\n            lineHeight: style.fontSize as number,\n        };\n\n        let positionX = 0;\n        let positionY = 0;\n\n        let canvas: HTMLCanvasElement;\n        let context: CanvasRenderingContext2D;\n        let baseTexture: BaseTexture;\n        let maxCharHeight = 0;\n        const baseTextures: BaseTexture[] = [];\n        const textures: Texture[] = [];\n\n        for (let i = 0; i < charsList.length; i++)\n        {\n            if (!canvas)\n            {\n                canvas = document.createElement('canvas');\n                canvas.width = textureWidth;\n                canvas.height = textureHeight;\n\n                context = canvas.getContext('2d');\n                baseTexture = new BaseTexture(canvas, { resolution });\n\n                baseTextures.push(baseTexture);\n                textures.push(new Texture(baseTexture));\n\n                fontData.page.push({\n                    id: textures.length - 1,\n                    file: '',\n                });\n            }\n\n            // Measure glyph dimensions\n            const metrics = TextMetrics.measureText(charsList[i], style, false, canvas);\n            const width = metrics.width;\n            const height = Math.ceil(metrics.height);\n\n            // This is ugly - but italics are given more space so they don't overlap\n            const textureGlyphWidth = Math.ceil((style.fontStyle === 'italic' ? 2 : 1) * width);\n\n            // Can't fit char anymore: next canvas please!\n            if (positionY >= textureHeight - (height * resolution))\n            {\n                if (positionY === 0)\n                {\n                    // We don't want user debugging an infinite loop (or do we? :)\n                    throw new Error(`[BitmapFont] textureHeight ${textureHeight}px is `\n                        + `too small for ${style.fontSize}px fonts`);\n                }\n\n                --i;\n\n                // Create new atlas once current has filled up\n                canvas = null;\n                context = null;\n                baseTexture = null;\n                positionY = 0;\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            maxCharHeight = Math.max(height + metrics.fontProperties.descent, maxCharHeight);\n\n            // Wrap line once full row has been rendered\n            if ((textureGlyphWidth * resolution) + positionX >= lineWidth)\n            {\n                --i;\n                positionY += maxCharHeight * resolution;\n                positionY = Math.ceil(positionY);\n                positionX = 0;\n                maxCharHeight = 0;\n\n                continue;\n            }\n\n            drawGlyph(canvas, context, metrics, positionX, positionY, resolution, style);\n\n            // Unique (numeric) ID mapping to this glyph\n            const id = metrics.text.charCodeAt(0);\n\n            // Create a texture holding just the glyph\n            fontData.char.push({\n                id,\n                page: textures.length - 1,\n                x: positionX / resolution,\n                y: positionY / resolution,\n                width: textureGlyphWidth,\n                height,\n                xoffset: 0,\n                yoffset: 0,\n                xadvance: Math.ceil(width\n                        - (style.dropShadow ? style.dropShadowDistance : 0)\n                        - (style.stroke ? style.strokeThickness : 0)),\n            });\n\n            positionX += (textureGlyphWidth + (2 * padding)) * resolution;\n            positionX = Math.ceil(positionX);\n        }\n\n        // Brute-force kerning info, this can be expensive b/c it's an O(n²),\n        // but we're using measureText which is native and fast.\n        for (let i = 0, len = charsList.length; i < len; i++)\n        {\n            const first = charsList[i];\n\n            for (let j = 0; j < len; j++)\n            {\n                const second = charsList[j];\n                const c1 = context.measureText(first).width;\n                const c2 = context.measureText(second).width;\n                const total = context.measureText(first + second).width;\n                const amount = total - (c1 + c2);\n\n                if (amount)\n                {\n                    fontData.kerning.push({\n                        first: first.charCodeAt(0),\n                        second: second.charCodeAt(0),\n                        amount,\n                    });\n                }\n            }\n        }\n\n        const font = new BitmapFont(fontData, textures, true);\n\n        // Make it easier to replace a font\n        if (BitmapFont.available[name] !== undefined)\n        {\n            BitmapFont.uninstall(name);\n        }\n\n        BitmapFont.available[name] = font;\n\n        return font;\n    }\n}\n\n/**\n * @memberof PIXI\n * @interface IBitmapFontOptions\n * @property {string | string[] | string[][]} [chars=PIXI.BitmapFont.ALPHANUMERIC] - the character set to generate\n * @property {number} [resolution=1] - the resolution for rendering\n * @property {number} [padding=4] - the padding between glyphs in the atlas\n * @property {number} [textureWidth=512] - the width of the texture atlas\n * @property {number} [textureHeight=512] - the height of the texture atlas\n */\n","/**\n * Processes the passed character set data and returns a flattened array of all the characters.\n *\n * Ignored because not directly exposed.\n *\n * @ignore\n * @param {string | string[] | string[][] } chars\n * @returns {string[]}\n */\nexport function resolveCharacters(chars: string | (string | string[])[]): string[]\n{\n    // Split the chars string into individual characters\n    if (typeof chars === 'string')\n    {\n        chars = [chars];\n    }\n\n    // Handle an array of characters+ranges\n    const result: string[] = [];\n\n    for (let i = 0, j = chars.length; i < j; i++)\n    {\n        const item = chars[i];\n\n        // Handle range delimited by start/end chars\n        if (Array.isArray(item))\n        {\n            if (item.length !== 2)\n            {\n                throw new Error(`[BitmapFont]: Invalid character range length, expecting 2 got ${item.length}.`);\n            }\n\n            const startCode = item[0].charCodeAt(0);\n            const endCode = item[1].charCodeAt(0);\n\n            if (endCode < startCode)\n            {\n                throw new Error('[BitmapFont]: Invalid character range.');\n            }\n\n            for (let i = startCode, j = endCode; i <= j; i++)\n            {\n                result.push(String.fromCharCode(i));\n            }\n        }\n        // Handle a character set string\n        else\n        {\n            result.push(...item.split(''));\n        }\n    }\n\n    if (result.length === 0)\n    {\n        throw new Error('[BitmapFont]: Empty set when resolving characters.');\n    }\n\n    return result;\n}\n","import { ObservablePoint, Point } from '@pixi/math';\nimport { settings } from '@pixi/settings';\nimport { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { removeItems } from '@pixi/utils';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Rectangle } from '@pixi/math';\nimport { Texture } from '@pixi/core';\nimport type { IBitmapTextStyle } from './BitmapTextStyle';\nimport type { TextStyleAlign } from '@pixi/text';\nimport { Container } from '@pixi/display';\nimport type { IDestroyOptions } from '@pixi/display';\n\ninterface PageMeshData {\n    index: number;\n    indexCount: number;\n    vertexCount: number;\n    uvsCount: number;\n    total: number;\n    mesh: Mesh;\n    vertices?: Float32Array;\n    uvs?: Float32Array;\n    indices?: Uint16Array;\n}\ninterface CharRenderData {\n    texture: Texture;\n    line: number;\n    charCode: number;\n    position: Point;\n    prevSpaces: number;\n}\n\nconst pageMeshDataPool: PageMeshData[] = [];\nconst charRenderDataPool: CharRenderData[] = [];\n\n/**\n * A BitmapText object will create a line or multiple lines of text using bitmap font.\n *\n * The primary advantage of this class over Text is that all of your textures are pre-generated and loading,\n * meaning that rendering is fast, and changing text has no performance implications.\n *\n * Supporting character sets other than latin, such as CJK languages, may be impractical due to the number of characters.\n *\n * To split a line you can use '\\n', '\\r' or '\\r\\n' in your string.\n *\n * PixiJS can auto-generate fonts on-the-fly using BitmapFont or use fnt files provided by:\n * http://www.angelcode.com/products/bmfont/ for Windows or\n * http://www.bmglyph.com/ for Mac.\n *\n * A BitmapText can only be created when the font is loaded.\n *\n * ```js\n * // in this case the font is in a file called 'desyrel.fnt'\n * let bitmapText = new PIXI.BitmapText(\"text using a fancy font!\", {\n *   fontName: \"Desyrel\",\n *   fontSize: 35,\n *   align: \"right\"\n * });\n * ```\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport class BitmapText extends Container\n{\n    public static styleDefaults: Partial<IBitmapTextStyle> = {\n        align: 'left',\n        tint: 0xFFFFFF,\n        maxWidth: 0,\n        letterSpacing: 0,\n    };\n    public dirty: boolean;\n    protected _textWidth: number;\n    protected _textHeight: number;\n    protected _text: string;\n    protected _maxWidth: number;\n    protected _maxLineHeight: number;\n    protected _letterSpacing: number;\n    protected _anchor: ObservablePoint;\n    protected _fontName: string;\n    protected _fontSize: number;\n    protected _align: TextStyleAlign;\n    protected _activePagesMeshData: PageMeshData[];\n    protected _tint = 0xFFFFFF;\n    protected _roundPixels: boolean;\n    private _textureCache: Record<number, Texture>;\n\n    /**\n     * @param {string} text - A string that you would like the text to display.\n     * @param {object} style - The style parameters.\n     * @param {string} style.fontName - The installed BitmapFont name.\n     * @param {number} [style.fontSize] - The size of the font in pixels, e.g. 24. If undefined,\n     *.     this will default to the BitmapFont size.\n     * @param {string} [style.align='left'] - Alignment for multiline text ('left', 'center', 'right' or 'justify'),\n     *      does not affect single line text.\n     * @param {number} [style.tint=0xFFFFFF] - The tint color.\n     * @param {number} [style.letterSpacing=0] - The amount of spacing between letters.\n     * @param {number} [style.maxWidth=0] - The max width of the text before line wrapping.\n     */\n    constructor(text: string, style: Partial<IBitmapTextStyle> = {})\n    {\n        super();\n\n        // Apply the defaults\n        const { align, tint, maxWidth, letterSpacing, fontName, fontSize } = Object.assign(\n            {}, BitmapText.styleDefaults, style);\n\n        if (!BitmapFont.available[fontName])\n        {\n            throw new Error(`Missing BitmapFont \"${fontName}\"`);\n        }\n\n        /**\n         * Collection of page mesh data.\n         *\n         * @member {object}\n         * @private\n         */\n        this._activePagesMeshData = [];\n\n        /**\n         * Private tracker for the width of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textWidth = 0;\n\n        /**\n         * Private tracker for the height of the overall text\n         *\n         * @member {number}\n         * @private\n         */\n        this._textHeight = 0;\n\n        /**\n         * Private tracker for the current text align.\n         *\n         * @member {string}\n         * @private\n         */\n        this._align = align;\n\n        /**\n         * Private tracker for the current tint.\n         *\n         * @member {number}\n         * @private\n         */\n        this._tint = tint;\n\n        /**\n         * Private tracker for the current font name.\n         *\n         * @member {string}\n         * @private\n         */\n        this._fontName = fontName;\n\n        /**\n         * Private tracker for the current font size.\n         *\n         * @member {number}\n         * @private\n         */\n        this._fontSize = fontSize || BitmapFont.available[fontName].size;\n\n        /**\n         * Private tracker for the current text.\n         *\n         * @member {string}\n         * @private\n         */\n        this._text = text;\n\n        /**\n         * The max width of this bitmap text in pixels. If the text provided is longer than the\n         * value provided, line breaks will be automatically inserted in the last whitespace.\n         * Disable by setting value to 0\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxWidth = maxWidth;\n\n        /**\n         * The max line height. This is useful when trying to use the total height of the Text,\n         * ie: when trying to vertically align. (Internally used)\n         *\n         * @member {number}\n         * @private\n         */\n        this._maxLineHeight = 0;\n\n        /**\n         * Letter spacing. This is useful for setting the space between characters.\n         * @member {number}\n         * @private\n         */\n        this._letterSpacing = letterSpacing;\n\n        /**\n         * Text anchor. read-only\n         *\n         * @member {PIXI.ObservablePoint}\n         * @private\n         */\n        this._anchor = new ObservablePoint((): void => { this.dirty = true; }, this, 0, 0);\n\n        /**\n         * If true PixiJS will Math.floor() x/y values when rendering\n         *\n         * @member {boolean}\n         * @default PIXI.settings.ROUND_PIXELS\n         */\n        this._roundPixels = settings.ROUND_PIXELS;\n\n        /**\n         * Set to `true` if the BitmapText needs to be redrawn.\n         *\n         * @member {boolean}\n         */\n        this.dirty = true;\n\n        /**\n         * Cached char texture is destroyed when BitmapText is destroyed\n         * @member {Record<number, Texture>}\n         * @private\n         */\n        this._textureCache = {};\n    }\n\n    /**\n     * Renders text and updates it when needed. This should only be called\n     * if the BitmapFont is regenerated.\n     */\n    public updateText(): void\n    {\n        const data = BitmapFont.available[this._fontName];\n        const scale = this._fontSize / data.size;\n        const pos = new Point();\n        const chars: CharRenderData[] = [];\n        const lineWidths = [];\n        const lineSpaces = [];\n        const text = this._text.replace(/(?:\\r\\n|\\r)/g, '\\n') || ' ';\n        const textLength = text.length;\n        const maxWidth = this._maxWidth * data.size / this._fontSize;\n\n        let prevCharCode = null;\n        let lastLineWidth = 0;\n        let maxLineWidth = 0;\n        let line = 0;\n        let lastBreakPos = -1;\n        let lastBreakWidth = 0;\n        let spacesRemoved = 0;\n        let maxLineHeight = 0;\n        let spaceCount = 0;\n\n        for (let i = 0; i < textLength; i++)\n        {\n            const charCode = text.charCodeAt(i);\n            const char = text.charAt(i);\n\n            if ((/(?:\\s)/).test(char))\n            {\n                lastBreakPos = i;\n                lastBreakWidth = lastLineWidth;\n                spaceCount++;\n            }\n\n            if (char === '\\r' || char === '\\n')\n            {\n                lineWidths.push(lastLineWidth);\n                lineSpaces.push(-1);\n                maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n                ++line;\n                ++spacesRemoved;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n                continue;\n            }\n\n            const charData = data.chars[charCode];\n\n            if (!charData)\n            {\n                continue;\n            }\n\n            if (prevCharCode && charData.kerning[prevCharCode])\n            {\n                pos.x += charData.kerning[prevCharCode];\n            }\n\n            const charRenderData = charRenderDataPool.pop() || {\n                texture: Texture.EMPTY,\n                line: 0,\n                charCode: 0,\n                prevSpaces: 0,\n                position: new Point(),\n            };\n\n            charRenderData.texture = charData.texture;\n            charRenderData.line = line;\n            charRenderData.charCode = charCode;\n            charRenderData.position.x = pos.x + charData.xOffset + (this._letterSpacing / 2);\n            charRenderData.position.y = pos.y + charData.yOffset;\n            charRenderData.prevSpaces = spaceCount;\n\n            chars.push(charRenderData);\n\n            lastLineWidth = charRenderData.position.x + charData.texture.orig.width;// Use charRenderData position!\n            pos.x += charData.xAdvance + this._letterSpacing;\n            maxLineHeight = Math.max(maxLineHeight, (charData.yOffset + charData.texture.height));\n            prevCharCode = charCode;\n\n            if (lastBreakPos !== -1 && maxWidth > 0 && pos.x > maxWidth)\n            {\n                ++spacesRemoved;\n                removeItems(chars, 1 + lastBreakPos - spacesRemoved, 1 + i - lastBreakPos);\n                i = lastBreakPos;\n                lastBreakPos = -1;\n\n                lineWidths.push(lastBreakWidth);\n                lineSpaces.push(chars.length > 0 ? chars[chars.length - 1].prevSpaces : 0);\n                maxLineWidth = Math.max(maxLineWidth, lastBreakWidth);\n                line++;\n\n                pos.x = 0;\n                pos.y += data.lineHeight;\n                prevCharCode = null;\n                spaceCount = 0;\n            }\n        }\n\n        const lastChar = text.charAt(text.length - 1);\n\n        if (lastChar !== '\\r' && lastChar !== '\\n')\n        {\n            if ((/(?:\\s)/).test(lastChar))\n            {\n                lastLineWidth = lastBreakWidth;\n            }\n\n            lineWidths.push(lastLineWidth);\n            maxLineWidth = Math.max(maxLineWidth, lastLineWidth);\n            lineSpaces.push(-1);\n        }\n\n        const lineAlignOffsets = [];\n\n        for (let i = 0; i <= line; i++)\n        {\n            let alignOffset = 0;\n\n            if (this._align === 'right')\n            {\n                alignOffset = maxLineWidth - lineWidths[i];\n            }\n            else if (this._align === 'center')\n            {\n                alignOffset = (maxLineWidth - lineWidths[i]) / 2;\n            }\n            else if (this._align === 'justify')\n            {\n                alignOffset = lineSpaces[i] < 0 ? 0 : (maxLineWidth - lineWidths[i]) / lineSpaces[i];\n            }\n\n            lineAlignOffsets.push(alignOffset);\n        }\n\n        const lenChars = chars.length;\n\n        const pagesMeshData: Record<number, PageMeshData> = {};\n\n        const newPagesMeshData: PageMeshData[] = [];\n\n        const activePagesMeshData = this._activePagesMeshData;\n\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            pageMeshDataPool.push(activePagesMeshData[i]);\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const texture = chars[i].texture;\n            const baseTextureUid = texture.baseTexture.uid;\n\n            if (!pagesMeshData[baseTextureUid])\n            {\n                let pageMeshData = pageMeshDataPool.pop();\n\n                if (!pageMeshData)\n                {\n                    const geometry = new MeshGeometry();\n                    const material = new MeshMaterial(Texture.EMPTY);\n\n                    const mesh = new Mesh(geometry, material);\n\n                    pageMeshData = {\n                        index: 0,\n                        indexCount: 0,\n                        vertexCount: 0,\n                        uvsCount: 0,\n                        total: 0,\n                        mesh,\n                        vertices: null,\n                        uvs: null,\n                        indices: null,\n                    };\n                }\n\n                // reset data..\n                pageMeshData.index = 0;\n                pageMeshData.indexCount = 0;\n                pageMeshData.vertexCount = 0;\n                pageMeshData.uvsCount = 0;\n                pageMeshData.total = 0;\n\n                // TODO need to get page texture here somehow..\n                const { _textureCache } = this;\n\n                _textureCache[baseTextureUid] = _textureCache[baseTextureUid] || new Texture(texture.baseTexture);\n                pageMeshData.mesh.texture = _textureCache[baseTextureUid];\n\n                pageMeshData.mesh.tint = this._tint;\n\n                newPagesMeshData.push(pageMeshData);\n\n                pagesMeshData[baseTextureUid] = pageMeshData;\n            }\n\n            pagesMeshData[baseTextureUid].total++;\n        }\n\n        // lets find any previously active pageMeshDatas that are no longer required for\n        // the updated text (if any), removed and return them to the pool.\n        for (let i = 0; i < activePagesMeshData.length; i++)\n        {\n            if (newPagesMeshData.indexOf(activePagesMeshData[i]) === -1)\n            {\n                this.removeChild(activePagesMeshData[i].mesh);\n            }\n        }\n\n        // next lets add any new meshes, that have not yet been added to this BitmapText\n        // we only add if its not already a child of this BitmapObject\n        for (let i = 0; i < newPagesMeshData.length; i++)\n        {\n            if (newPagesMeshData[i].mesh.parent !== this)\n            {\n                this.addChild(newPagesMeshData[i].mesh);\n            }\n        }\n\n        // active page mesh datas are set to be the new pages added.\n        this._activePagesMeshData = newPagesMeshData;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n            const total = pageMeshData.total;\n\n            // lets only allocate new buffers if we can fit the new text in the current ones..\n            // unless that is, we will be batching. Currently batching dose not respect the size property of mesh\n            if (!(pageMeshData.indices?.length > 6 * total) || pageMeshData.vertices.length < Mesh.BATCHABLE_SIZE * 2)\n            {\n                pageMeshData.vertices = new Float32Array(4 * 2 * total);\n                pageMeshData.uvs = new Float32Array(4 * 2 * total);\n                pageMeshData.indices = new Uint16Array(6 * total);\n            }\n            else\n            {\n                const total = pageMeshData.total;\n                const vertices = pageMeshData.vertices;\n\n                // Clear the garbage at the end of the vertices buffer. This will prevent the bounds miscalculation.\n                for (let i = total * 4 * 2; i < vertices.length; i++)\n                {\n                    vertices[i] = 0;\n                }\n            }\n\n            // as a buffer maybe bigger than the current word, we set the size of the meshMaterial\n            // to match the number of letters needed\n            pageMeshData.mesh.size = 6 * total;\n        }\n\n        for (let i = 0; i < lenChars; i++)\n        {\n            const char = chars[i];\n            let offset = char.position.x + (lineAlignOffsets[char.line] * (this._align === 'justify' ? char.prevSpaces : 1));\n\n            if (this._roundPixels)\n            {\n                offset = Math.round(offset);\n            }\n\n            const xPos = offset * scale;\n            const yPos = char.position.y * scale;\n            const texture = char.texture;\n\n            const pageMesh = pagesMeshData[texture.baseTexture.uid];\n\n            const textureFrame = texture.frame;\n            const textureUvs = texture._uvs;\n\n            const index = pageMesh.index++;\n\n            pageMesh.indices[(index * 6) + 0] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 1] = 1 + (index * 4);\n            pageMesh.indices[(index * 6) + 2] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 3] = 0 + (index * 4);\n            pageMesh.indices[(index * 6) + 4] = 2 + (index * 4);\n            pageMesh.indices[(index * 6) + 5] = 3 + (index * 4);\n\n            pageMesh.vertices[(index * 8) + 0] = xPos;\n            pageMesh.vertices[(index * 8) + 1] = yPos;\n\n            pageMesh.vertices[(index * 8) + 2] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 3] = yPos;\n\n            pageMesh.vertices[(index * 8) + 4] = xPos + (textureFrame.width * scale);\n            pageMesh.vertices[(index * 8) + 5] = yPos + (textureFrame.height * scale);\n\n            pageMesh.vertices[(index * 8) + 6] = xPos;\n            pageMesh.vertices[(index * 8) + 7] = yPos + (textureFrame.height * scale);\n\n            pageMesh.uvs[(index * 8) + 0] = textureUvs.x0;\n            pageMesh.uvs[(index * 8) + 1] = textureUvs.y0;\n\n            pageMesh.uvs[(index * 8) + 2] = textureUvs.x1;\n            pageMesh.uvs[(index * 8) + 3] = textureUvs.y1;\n\n            pageMesh.uvs[(index * 8) + 4] = textureUvs.x2;\n            pageMesh.uvs[(index * 8) + 5] = textureUvs.y2;\n\n            pageMesh.uvs[(index * 8) + 6] = textureUvs.x3;\n            pageMesh.uvs[(index * 8) + 7] = textureUvs.y3;\n        }\n\n        this._textWidth = maxLineWidth * scale;\n        this._textHeight = (pos.y + data.lineHeight) * scale;\n\n        for (const i in pagesMeshData)\n        {\n            const pageMeshData = pagesMeshData[i];\n\n            // apply anchor\n            if (this.anchor.x !== 0 || this.anchor.y !== 0)\n            {\n                let vertexCount = 0;\n\n                const anchorOffsetX = this._textWidth * this.anchor.x;\n                const anchorOffsetY = this._textHeight * this.anchor.y;\n\n                for (let i = 0; i < pageMeshData.total; i++)\n                {\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetX;\n                    pageMeshData.vertices[vertexCount++] -= anchorOffsetY;\n                }\n            }\n\n            this._maxLineHeight = maxLineHeight * scale;\n\n            const vertexBuffer = pageMeshData.mesh.geometry.getBuffer('aVertexPosition');\n            const textureBuffer = pageMeshData.mesh.geometry.getBuffer('aTextureCoord');\n            const indexBuffer = pageMeshData.mesh.geometry.getIndex();\n\n            vertexBuffer.data = pageMeshData.vertices;\n            textureBuffer.data = pageMeshData.uvs;\n            indexBuffer.data = pageMeshData.indices;\n\n            vertexBuffer.update();\n            textureBuffer.update();\n            indexBuffer.update();\n        }\n\n        for (let i = 0; i < chars.length; i++)\n        {\n            charRenderDataPool.push(chars[i]);\n        }\n    }\n\n    /**\n     * Updates the transform of this object\n     *\n     * @private\n     */\n    updateTransform(): void\n    {\n        this.validate();\n        this.containerUpdateTransform();\n    }\n\n    /**\n     * Validates text before calling parent's getLocalBounds\n     *\n     * @return {PIXI.Rectangle} The rectangular bounding area\n     */\n    public getLocalBounds(): Rectangle\n    {\n        this.validate();\n\n        return super.getLocalBounds();\n    }\n\n    /**\n     * Updates text when needed\n     *\n     * @private\n     */\n    protected validate(): void\n    {\n        if (this.dirty)\n        {\n            this.updateText();\n            this.dirty = false;\n        }\n    }\n\n    /**\n     * The tint of the BitmapText object.\n     *\n     * @member {number}\n     * @default 0xffffff\n     */\n    public get tint(): number\n    {\n        return this._tint;\n    }\n\n    public set tint(value: number)\n    {\n        if (this._tint === value) return;\n\n        this._tint = value;\n\n        for (let i = 0; i < this._activePagesMeshData.length; i++)\n        {\n            this._activePagesMeshData[i].mesh.tint = value;\n        }\n    }\n\n    /**\n     * The alignment of the BitmapText object.\n     *\n     * @member {string}\n     * @default 'left'\n     */\n    public get align(): TextStyleAlign\n    {\n        return this._align;\n    }\n\n    public set align(value: TextStyleAlign)\n    {\n        if (this._align !== value)\n        {\n            this._align = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The name of the BitmapFont.\n     *\n     * @member {string}\n     */\n    public get fontName(): string\n    {\n        return this._fontName;\n    }\n\n    public set fontName(value: string)\n    {\n        if (!BitmapFont.available[value])\n        {\n            throw new Error(`Missing BitmapFont \"${value}\"`);\n        }\n\n        if (this._fontName !== value)\n        {\n            this._fontName = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The size of the font to display.\n     *\n     * @member {number}\n     */\n    public get fontSize(): number\n    {\n        return this._fontSize;\n    }\n\n    public set fontSize(value: number)\n    {\n        if (this._fontSize !== value)\n        {\n            this._fontSize = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The anchor sets the origin point of the text.\n     *\n     * The default is `(0,0)`, this means the text's origin is the top left.\n     *\n     * Setting the anchor to `(0.5,0.5)` means the text's origin is centered.\n     *\n     * Setting the anchor to `(1,1)` would mean the text's origin point will be the bottom right corner.\n     *\n     * @member {PIXI.Point | number}\n     */\n    public get anchor(): ObservablePoint\n    {\n        return this._anchor;\n    }\n\n    public set anchor(value: ObservablePoint)\n    {\n        if (typeof value === 'number')\n        {\n            this._anchor.set(value);\n        }\n        else\n        {\n            this._anchor.copyFrom(value);\n        }\n    }\n\n    /**\n     * The text of the BitmapText object.\n     *\n     * @member {string}\n     */\n    public get text(): string\n    {\n        return this._text;\n    }\n\n    public set text(text: string)\n    {\n        text = String(text === null || text === undefined ? '' : text);\n\n        if (this._text === text)\n        {\n            return;\n        }\n        this._text = text;\n        this.dirty = true;\n    }\n\n    /**\n     * The max width of this bitmap text in pixels. If the text provided is longer than the\n     * value provided, line breaks will be automatically inserted in the last whitespace.\n     * Disable by setting the value to 0.\n     *\n     * @member {number}\n     */\n    public get maxWidth(): number\n    {\n        return this._maxWidth;\n    }\n\n    public set maxWidth(value: number)\n    {\n        if (this._maxWidth === value)\n        {\n            return;\n        }\n        this._maxWidth = value;\n        this.dirty = true;\n    }\n\n    /**\n     * The max line height. This is useful when trying to use the total height of the Text,\n     * i.e. when trying to vertically align.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get maxLineHeight(): number\n    {\n        this.validate();\n\n        return this._maxLineHeight;\n    }\n\n    /**\n     * The width of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textWidth(): number\n    {\n        this.validate();\n\n        return this._textWidth;\n    }\n\n    /**\n     * Additional space between characters.\n     *\n     * @member {number}\n     */\n    public get letterSpacing(): number\n    {\n        return this._letterSpacing;\n    }\n\n    public set letterSpacing(value: number)\n    {\n        if (this._letterSpacing !== value)\n        {\n            this._letterSpacing = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * If true PixiJS will Math.floor() x/y values when rendering, stopping pixel interpolation.\n     * Advantages can include sharper image quality (like text) and faster rendering on canvas.\n     * The main disadvantage is movement of objects may appear less smooth.\n     * To set the global default, change {@link PIXI.settings.ROUND_PIXELS}\n     *\n     * @member {boolean}\n     * @default PIXI.settings.ROUND_PIXELS\n     */\n    public get roundPixels(): boolean\n    {\n        return this._roundPixels;\n    }\n\n    public set roundPixels(value: boolean)\n    {\n        if (value !== this._roundPixels)\n        {\n            this._roundPixels = value;\n            this.dirty = true;\n        }\n    }\n\n    /**\n     * The height of the overall text, different from fontSize,\n     * which is defined in the style object.\n     *\n     * @member {number}\n     * @readonly\n     */\n    public get textHeight(): number\n    {\n        this.validate();\n\n        return this._textHeight;\n    }\n\n    destroy(options?: boolean | IDestroyOptions): void\n    {\n        const { _textureCache } = this;\n\n        for (const id in _textureCache)\n        {\n            const texture = _textureCache[id];\n\n            texture.destroy();\n            delete _textureCache[id];\n        }\n\n        this._textureCache = null;\n\n        super.destroy(options);\n    }\n}\n","import { LoaderResource } from '@pixi/loaders';\nimport { autoDetectFormat } from './formats';\nimport { BitmapFont } from './BitmapFont';\n\nimport type { Loader } from '@pixi/loaders';\nimport type { Dict } from '@pixi/utils';\nimport type { Texture } from '@pixi/core';\n\n/**\n * {@link PIXI.Loader Loader} middleware for loading\n * bitmap-based fonts suitable for using with {@link PIXI.BitmapText}.\n * @class\n * @memberof PIXI\n * @implements PIXI.ILoaderPlugin\n */\nexport class BitmapFontLoader\n{\n    /**\n     * Called when the plugin is installed.\n     *\n     * @see PIXI.Loader.registerPlugin\n     */\n    public static add(): void\n    {\n        LoaderResource.setExtensionXhrType('fnt', LoaderResource.XHR_RESPONSE_TYPE.TEXT);\n    }\n\n    /**\n     * Called after a resource is loaded.\n     * @see PIXI.Loader.loaderMiddleware\n     * @param {PIXI.LoaderResource} resource\n     * @param {function} next\n     */\n    static use(this: Loader, resource: LoaderResource, next: (...args: any[]) => void): void\n    {\n        const format = autoDetectFormat(resource.data);\n\n        // Resource was not recognised as any of the expected font data format\n        if (!format)\n        {\n            next();\n\n            return;\n        }\n\n        const baseUrl = BitmapFontLoader.getBaseUrl(this, resource);\n        const data = format.parse(resource.data);\n        const textures: Dict<Texture> = {};\n\n        // Handle completed, when the number of textures\n        // load is the same number as references in the fnt file\n        const completed = (page: LoaderResource): void =>\n        {\n            textures[page.metadata.pageFile] = page.texture;\n\n            if (Object.keys(textures).length === data.page.length)\n            {\n                resource.bitmapFont = BitmapFont.install(data, textures, true);\n                next();\n            }\n        };\n\n        for (let i = 0; i < data.page.length; ++i)\n        {\n            const pageFile = data.page[i].file;\n            const url = baseUrl + pageFile;\n            let exists = false;\n\n            // incase the image is loaded outside\n            // using the same loader, resource will be available\n            for (const name in this.resources)\n            {\n                const bitmapResource: LoaderResource = this.resources[name];\n\n                if (bitmapResource.url === url)\n                {\n                    bitmapResource.metadata.pageFile = pageFile;\n                    if (bitmapResource.texture)\n                    {\n                        completed(bitmapResource);\n                    }\n                    else\n                    {\n                        bitmapResource.onAfterMiddleware.add(completed);\n                    }\n                    exists = true;\n                    break;\n                }\n            }\n\n            // texture is not loaded, we'll attempt to add\n            // it to the load and add the texture to the list\n            if (!exists)\n            {\n                // Standard loading options for images\n                const options = {\n                    crossOrigin: resource.crossOrigin,\n                    loadType: LoaderResource.LOAD_TYPE.IMAGE,\n                    metadata: Object.assign(\n                        { pageFile },\n                        resource.metadata.imageMetadata\n                    ),\n                    parentResource: resource,\n                };\n\n                this.add(url, options, completed);\n            }\n        }\n    }\n\n    /**\n     * Get folder path from a resource\n     * @private\n     * @param {PIXI.Loader} loader\n     * @param {PIXI.LoaderResource} resource\n     * @return {string}\n     */\n    private static getBaseUrl(loader: Loader, resource: LoaderResource): string\n    {\n        let resUrl = !resource.isDataUrl ? BitmapFontLoader.dirname(resource.url) : '';\n\n        if (resource.isDataUrl)\n        {\n            if (resUrl === '.')\n            {\n                resUrl = '';\n            }\n\n            if (loader.baseUrl && resUrl)\n            {\n                // if baseurl has a trailing slash then add one to resUrl so the replace works below\n                if (loader.baseUrl.charAt(loader.baseUrl.length - 1) === '/')\n                {\n                    resUrl += '/';\n                }\n            }\n        }\n\n        // remove baseUrl from resUrl\n        resUrl = resUrl.replace(loader.baseUrl, '');\n\n        // if there is an resUrl now, it needs a trailing slash. Ensure that it does if the string isn't empty.\n        if (resUrl && resUrl.charAt(resUrl.length - 1) !== '/')\n        {\n            resUrl += '/';\n        }\n\n        return resUrl;\n    }\n\n    /**\n     * Replacement for NodeJS's path.dirname\n     * @private\n     * @param {string} url - Path to get directory for\n     */\n    private static dirname(url: string): string\n    {\n        const dir = url\n            .replace(/\\\\/g, '/') // convert windows notation to UNIX notation, URL-safe because it's a forbidden character\n            .replace(/\\/$/, '') // replace trailing slash\n            .replace(/\\/[^\\/]*$/, ''); // remove everything after the last\n\n        // File request is relative, use current directory\n        if (dir === url)\n        {\n            return '.';\n        }\n        // Started with a slash\n        else if (dir === '')\n        {\n            return '/';\n        }\n\n        return dir;\n    }\n}\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","this","info","common","page","char","kerning","TextFormat","data","indexOf","txt","items","match","rawData","chars","kernings","i","name","attributeList","itemData","i_1","split","key","strValue","replace","floatValue","parseFloat","value","isNaN","push","font","BitmapFontData","forEach","face","size","parseInt","lineHeight","id","file","x","y","width","height","xoffset","yoffset","xadvance","first","second","amount","XMLFormat","XMLDocument","getElementsByTagName","length","getAttribute","xml","letter","XMLStringFormat","self","DOMParser","parseFromString","test","xmlTxt","parse","formats","autoDetectFormat","drawGlyph","canvas","context","metrics","resolution","style","text","fontProperties","translate","scale","tx","strokeThickness","ty","toFontString","lineWidth","textBaseline","lineJoin","miterLimit","fillStyle","lines","gradient","fill","isArray","dropShadowCorrection","dropShadowDistance","padding","slice","fillGradientStops","lengthPlus1","unshift","fillGradientType","TEXT_GRADIENT","LINEAR_VERTICAL","createLinearGradient","lastIterationStop","gradStopLineHeight","fontSize","thisLineTop","j","globalStop","clampedStop","Math","max","min","addColorStop","totalIterations","currentIteration","stop","generateFillStyle","strokeStyle","stroke","dropShadowColor","rgb","hex2rgb","string2hex","dropShadow","shadowColor","dropShadowAlpha","shadowBlur","dropShadowBlur","shadowOffsetX","cos","dropShadowAngle","shadowOffsetY","sin","strokeText","descent","fillText","setTransform","textures","ownsTextures","res","getResolutionOfUrl","pageTextures","_ownsTextures","_a","_b","page_1","_c","rect","Rectangle","frame","xOffset","yOffset","xAdvance","texture","Texture","baseTexture","_d","BitmapFont","destroy","fontData","format","Error","available","textStyle","options","assign","defaultOptions","textureWidth","textureHeight","charsList","result","item","startCode","charCodeAt","endCode","j_1","String","fromCharCode","resolveCharacters","TextStyle","fontFamily","positionX","positionY","maxCharHeight","document","createElement","getContext","BaseTexture","TextMetrics","measureText","ceil","textureGlyphWidth","fontStyle","len","c1","c2","undefined","uninstall","ALPHANUMERIC","pageMeshDataPool","charRenderDataPool","_super","_this","BitmapText","styleDefaults","align","tint","maxWidth","letterSpacing","fontName","_activePagesMeshData","_textWidth","_textHeight","_align","_tint","_fontName","_fontSize","_text","_maxWidth","_maxLineHeight","_letterSpacing","_anchor","ObservablePoint","dirty","_roundPixels","settings","ROUND_PIXELS","_textureCache","__","constructor","prototype","create","__extends","pos","Point","lineWidths","lineSpaces","textLength","prevCharCode","lastLineWidth","maxLineWidth","line","lastBreakPos","lastBreakWidth","spacesRemoved","maxLineHeight","spaceCount","charCode","charAt","charData","charRenderData","pop","EMPTY","prevSpaces","position","orig","removeItems","lastChar","lineAlignOffsets","alignOffset","lenChars","pagesMeshData","newPagesMeshData","activePagesMeshData","baseTextureUid","uid","pageMeshData","geometry","MeshGeometry","material","MeshMaterial","index","indexCount","vertexCount","uvsCount","total","mesh","Mesh","vertices","uvs","indices","removeChild","parent","addChild","BATCHABLE_SIZE","Float32Array","Uint16Array","total_1","offset","round","xPos","yPos","pageMesh","textureFrame","textureUvs","_uvs","x0","y0","x1","y1","x2","y2","x3","y3","anchor","anchorOffsetX","anchorOffsetY","i_2","vertexBuffer","getBuffer","textureBuffer","indexBuffer","getIndex","update","validate","containerUpdateTransform","getLocalBounds","updateText","set","copyFrom","Container","BitmapFontLoader","LoaderResource","setExtensionXhrType","XHR_RESPONSE_TYPE","TEXT","resource","next","baseUrl","getBaseUrl","completed","metadata","pageFile","keys","bitmapFont","install","url","exists","resources","bitmapResource","onAfterMiddleware","add","crossOrigin","loadType","LOAD_TYPE","IMAGE","imageMetadata","parentResource","loader","resUrl","isDataUrl","dirname","dir"],"mappings":"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"}